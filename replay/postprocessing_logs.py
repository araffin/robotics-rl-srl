import os, glob
import numpy as np
from collections import defaultdict
import argparse


import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import FuncFormatter
import json


from rl_baselines.visualize import movingAverage, loadCsv, loadData
from replay.aggregate_plots import lightcolors, darkcolors, Y_LIM_SHAPED_REWARD, Y_LIM_SPARSE_REWARD, millions
from srl_zoo.utils import printGreen, printRed, printYellow


def loadEpisodesData(folder):
    """
    :param folder: (str) the folder that contains *.monitor.csv files (generated by gym)
    :return: 
        x: (np.array or None) timesteps, len(x) = total_timesteps // timestep_per_episode = number of episodes
        y: (np.array or None) rewards, len(y) = number of episodes
        total_timesteps: (int) total number of timesteps
    """
    result, total_timesteps = loadCsv(folder)
    if len(result) == 0:
        return None, None
    y = np.array(result)[:, 1]
    x = np.arange(len(y))
    return x, y, total_timesteps

def meanEpisodesReward(y, total_timesteps, checkpoints=[1e6, 2*1e6], episode_len=100, verbose=False):
    """
    
    episode_len: average over 'episode_len' episodes
    """
    total_episodes = len(y)
    time_per_epi = total_timesteps//total_episodes
    if verbose:
        print("Esimated timesteps per episode: {}".format(time_per_epi))

    mean_rwd = []
    for check in checkpoints:
        if check > total_timesteps:
            return mean_rwd
            # mean_rwd.append("-")
        else:
            check_episode = int((check/total_timesteps) * total_episodes)
            mean_rwd.append(np.mean(y[check_episode: check_episode+episode_len]))
    return mean_rwd

def timesteps2str(checkpoints):
    """
    :param checkpoints (list of float)
    :return (list of str)
    """
    checkpoints_str = []
    for check in checkpoints:
        if check >= 1e6:
            checkpoints_str.append("{:.1f} M".format(check/1e6))
        elif check >= 1e3:
            checkpoints_str.append("{:.1f} K".format(check/1e3))
        else:
            checkpoints_str.append("{:.1E} K".format(check))
    return checkpoints_str

def results2str_latex(results, max_len=5):
    """
    :param results (list of list of float, different length) e.g. [[1.0, 2.0], [1.7]]
    :param max_len (int): pad the rest by "-"
    :return (list of str, with length "max_len")
    """
    # new_result = np.array([" - "]*max_len)
    new_result = []
    for i in range(max_len):
        rewards = []
        for exp in results:
            try:
                rewards.append(exp[i])
            except:
                pass
        if len(rewards) == 0:
            new_result.append(" - ")
            continue
        mean = np.mean(rewards)
        if len(rewards) > 1:
            std = np.std(rewards)
            new_result.append("{:.2f} $\\pm$ {:.2f}".format(mean, 1.96*std/np.sqrt(len(rewards))))
        else:
            new_result.append("{:.2f}".format(mean))
    return new_result
def processStrLatex(name):
    new_name = "\_".join(name.split("_"))
    return new_name

def makeTable(input_dir, 
            rl_algo_name="ppo2", 
            checkpoints=[1e6, 2*1e6, 3*1e6, 4*1e6, 5*1e6], 
            episode_len=100, 
            caption="my-caption",
            filepath=None):
    """

    ---------- Latex table example -----------
    \begin{table}[h!]
    \centering
    \begin{tabular}{c|ccc} % c: center, l: left
    \hline
    0 & 0 & 0 & 1 \\ \hline
    1 & 1 & 1 & 2 \\
    2 & 2 & 2 & 3 \\ \hline
    \end{tabular}
    \caption{}
    \label{tab:my-table}
    \end{table}
    -----------------------------------------
    """
    ext = filepath.split(".")[-1]
    assert ext in ["tex", "md"], "Only support Latex (tex) or Markdown (md) extension"
    if ext == "md":
        raise NotImplementedError
    srl_algo_dirs = glob.glob(os.path.join(input_dir, "*")) # list of subfolder in input_dir
    table = defaultdict(lambda: [])
    for folder in srl_algo_dirs:
        srl_name = folder.split("/")[-1]
        srl_algo_exps = glob.glob(os.path.join(os.path.join(folder, rl_algo_name, "*")))
        printGreen("Found srl model: {} with {} experiments.".format(srl_name.ljust(20), len(srl_algo_exps)))
        for exp_dir in srl_algo_exps:
            _, rewards_history, total_timesteps = loadEpisodesData(exp_dir)
            mean_rwd = meanEpisodesReward(rewards_history, total_timesteps, checkpoints=checkpoints, episode_len=episode_len)
            table[srl_name].append(mean_rwd)

    with open(filepath, "w") as file:
        file.writelines("\\begin{table}[h!]\n")
        file.writelines("\\centering\n")
        file.writelines("\\begin{tabular}{c|"+len(checkpoints)*"c"+"}\n")
        file.writelines("\\hline\n")
        x_axis = timesteps2str(checkpoints)
        file.writelines("   & {} \\\\ \\hline \n".format(" & ".join(x_axis)))
        srl_names_list = sorted(list(table.keys()))
        if "ground_truth" in srl_names_list:
            ## put ground truth on the top of table
            srl_names_list.remove("ground_truth")
            srl_names_list.insert(0, "ground_truth") 
        for ind, srl_name in enumerate(srl_names_list):
            res = results2str_latex(table[srl_name])
            if ind == len(table) - 1 or srl_name == "ground_truth":
                file.writelines("{} & {} \\\\ \\hline \n".format(processStrLatex(srl_name), " & ".join(res)))
            else:
                file.writelines("{} & {} \\\\ \n".format(processStrLatex(srl_name), " & ".join(res)))

        file.writelines("\\end{tabular}\n")
        file.writelines("\\caption{{{}}}\n".format(caption))
        file.writelines("\\end{table}\n")

        

    return table

if __name__=="__main__":
    print("Start")
    parser = argparse.ArgumentParser(description="Post-processing training logs (rewards per timesteps/episodes)")
    parser.add_argument('-i', '--input-dir', help='Folder with different SRL models as subdirectories.', type=str, required=True)
    parser.add_argument('--algo', type=str, default='ppo2', help="The RL algorithm's result to show (folder name)")
    parser.add_argument('--tablepath', type=str, default=None, help="Save Latex table to path.")
    parser.add_argument('-cap', '--caption', type=str, default=None, help="Table caption.")
    parser.add_argument('--checkpoints', nargs='+', type=float, default=[1e6, 2*1e6, 3*1e6, 4*1e6, 5*1e6], help="Table caption.")

    args = parser.parse_args()

    table = makeTable(args.input_dir,
                     rl_algo_name=args.algo, 
                     filepath=args.tablepath, 
                     caption=args.caption,
                     checkpoints=args.checkpoints)

    ## usage: 
    # python -m replay.postprocessing_logs -i logs/Mobilerobot/Fixed_Target/MobileRobotGymEnv-v0/ --tablepath "../mobile_fixed.tex" -cap "MobileRobot (fixed target)" --checkpoints